// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    [Migration("20230527134128_migration20")]
    partial class migration20
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Server.Models.Admin.Admins", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCabinet")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdDoctor")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdCabinet");

                    b.HasIndex("IdDoctor");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("Server.Models.AdviceMedicals.AdviceMedical", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateSendMessage")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrdreMedicalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusViewReceiver")
                        .HasColumnType("int");

                    b.Property<string>("transmitterUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrdreMedicalId");

                    b.HasIndex("transmitterUserId");

                    b.ToTable("adviceMedicals");
                });

            modelBuilder.Entity("Server.Models.Analyse.Analyses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileAnalyse")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("IdOrdreMedical")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdOrdreMedical");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("Server.Models.CabinetMedicals.CabinetMedical", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("JobTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCabinet")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("numberPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("statusService")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NameCabinet");

                    b.ToTable("cabinetMedicals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf35304b-7896-4b81-8f57-d0dccdccb836"),
                            Adress = "rue 112 -Kores-Biskra",
                            JobTime = "8h->16h --dimanche a jeudi",
                            MapAdress = "",
                            NameCabinet = "Cabinet Medical El Balsem",
                            Services = "chirurgie-Coudre blessé-Médecin Général",
                            numberPhone = "0541253658",
                            statusService = 0
                        });
                });

            modelBuilder.Entity("Server.Models.ChronicDiseases.ChronicDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameChronicDiseases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("chronicDiseases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameChronicDiseases = "DIABÈTE"
                        },
                        new
                        {
                            Id = 2,
                            NameChronicDiseases = "HYPERTENSION-ARTÉRIELLE"
                        },
                        new
                        {
                            Id = 3,
                            NameChronicDiseases = "MALADIES-RESPIRATOIRES"
                        },
                        new
                        {
                            Id = 4,
                            NameChronicDiseases = "MALADIES RÉNALES"
                        },
                        new
                        {
                            Id = 5,
                            NameChronicDiseases = "MALADIES ARTICULAIRES"
                        },
                        new
                        {
                            Id = 6,
                            NameChronicDiseases = "MALADIES DU FOIE"
                        },
                        new
                        {
                            Id = 7,
                            NameChronicDiseases = "MALADIES NEUROLOGIQUES"
                        },
                        new
                        {
                            Id = 8,
                            NameChronicDiseases = "CANCER"
                        },
                        new
                        {
                            Id = 9,
                            NameChronicDiseases = "MALADIES-CARDIOVASCULAIRES"
                        });
                });

            modelBuilder.Entity("Server.Models.Cities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adrar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chlef"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Laghouat"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Oum El Bouaghi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Batna"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Béjaïa"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Biskra"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Béchar"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Blida"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Bouira"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Tamanrasset"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Tébessa"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Tlemcen"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Tiaret"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Tizi Ouzou"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Alger"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Djelfa"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Jijel"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Sétif"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Saïda"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Skikda"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Sidi Bel Abbès"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Annaba"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Guelma"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Constantine"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Médéa"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Mostaganem"
                        },
                        new
                        {
                            Id = 28,
                            Name = "M'Sila"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Mascara"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Ouargla"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Oran"
                        },
                        new
                        {
                            Id = 32,
                            Name = "El Bayadh"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Illizi"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Bordj Bou Arréridj"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Boumerdès"
                        },
                        new
                        {
                            Id = 36,
                            Name = "El Tarf"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Tindouf"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Tissemsilt"
                        },
                        new
                        {
                            Id = 39,
                            Name = "El Oued"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Khenchela"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Souk Ahras"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Tipaza"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Mila"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Aïn Defla"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Naâma"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Aïn Témouchent"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Ghardaïa"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Relizane"
                        });
                });

            modelBuilder.Entity("Server.Models.Doctor.Doctors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberRRPS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusDoctor")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Server.Models.FileChronicDisease.FileChronicDiseases", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdChronicDisease")
                        .HasColumnType("int");

                    b.Property<Guid>("IdFile")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdChronicDisease");

                    b.HasIndex("IdFile");

                    b.ToTable("FileChronicDiseases");
                });

            modelBuilder.Entity("Server.Models.LineAnalyseMedical.LineAnalyseMedicals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdAnalyse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSpecialisteAnalyse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdAnalyse");

                    b.HasIndex("IdSpecialisteAnalyse");

                    b.ToTable("LineAnalyseMedicals");
                });

            modelBuilder.Entity("Server.Models.LineRadioMedical.LineRadioMedicals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdRadio")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdRadiology")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdRadio");

                    b.HasIndex("IdRadiology");

                    b.ToTable("LineRadioMedicals");
                });

            modelBuilder.Entity("Server.Models.MedicalOrder.MedicalOrdres", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCabinetMedical")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdDoctor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdFileMedical")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSecritary")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.Property<string>("summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCabinetMedical");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdFileMedical");

                    b.HasIndex("IdSecritary");

                    b.ToTable("MedicalOrdres");
                });

            modelBuilder.Entity("Server.Models.MedicalPlannings.MedicalPlanning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppointmentAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCabinet")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdDoctor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCabinet");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdUser");

                    b.ToTable("medicalPlannings");
                });

            modelBuilder.Entity("Server.Models.MedicalsAnalysisClinic.MedicalAnalysisClinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdressMedicalAnalysis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailMedicalAnalysis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAnalysisName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicalAnalysisClinic");
                });

            modelBuilder.Entity("Server.Models.Pharmacist.Pharmacists", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthenticationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PharmacyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("idUser");

                    b.ToTable("Pharmacists");
                });

            modelBuilder.Entity("Server.Models.Pharmacys.Pharmacy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdressPharmacist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPharmacy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("Server.Models.PrescriptionLine.PrescriptionLines", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dosage")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdPharmacist")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPrescription")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MedicamentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusPrescriptionLine")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPharmacist");

                    b.HasIndex("IdPrescription");

                    b.ToTable("PrescriptionLines");
                });

            modelBuilder.Entity("Server.Models.Prescriptions.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FilePrescription")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("IdMedicalOrdre")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("qrCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdMedicalOrdre");

                    b.ToTable("prescriptions");
                });

            modelBuilder.Entity("Server.Models.RadioMedical.Radio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileRadio")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("IdOrdreMedical")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdOrdreMedical");

                    b.ToTable("Radio");
                });

            modelBuilder.Entity("Server.Models.Radiologys.Radiology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdDoctor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Materiel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdDoctor");

                    b.ToTable("radiologies");
                });

            modelBuilder.Entity("Server.Models.ResultAnalyses.ResultAnalyse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("AnalyseResult")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("IdLineAnalyse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("fileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdLineAnalyse");

                    b.ToTable("resultAnalyses");
                });

            modelBuilder.Entity("Server.Models.ResultsRadio.ResultRadio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileResult")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("IdLineRadio")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("fileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdLineRadio");

                    b.ToTable("RadioResult");
                });

            modelBuilder.Entity("Server.Models.SpecialisteAnalyses.SpecialisteAnalyse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthenticationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MedicalAnalyseClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("MedicalAnalyseClinicId");

                    b.ToTable("SpecialisteAnalyse");
                });

            modelBuilder.Entity("Server.Models.Specialites.Specialite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameSpecialite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("specialites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameSpecialite = "ANESTHÉSIOLOGIE"
                        },
                        new
                        {
                            Id = 2,
                            NameSpecialite = "CARDIOLOGIE"
                        },
                        new
                        {
                            Id = 3,
                            NameSpecialite = "CHIRURGIE"
                        },
                        new
                        {
                            Id = 4,
                            NameSpecialite = "DERMATOLOGIE"
                        },
                        new
                        {
                            Id = 5,
                            NameSpecialite = "ENDOCRINOLOGIE"
                        },
                        new
                        {
                            Id = 6,
                            NameSpecialite = "GASTRO ENTÉROLOGIE"
                        },
                        new
                        {
                            Id = 7,
                            NameSpecialite = "GYNÉCOLOGIE"
                        },
                        new
                        {
                            Id = 8,
                            NameSpecialite = "HÉMATOLOGIE"
                        },
                        new
                        {
                            Id = 9,
                            NameSpecialite = "INFECTIOLOGIE"
                        },
                        new
                        {
                            Id = 10,
                            NameSpecialite = "MÉDECINE DU TRAVAIL"
                        },
                        new
                        {
                            Id = 11,
                            NameSpecialite = "MÉDECINE INTERNE"
                        },
                        new
                        {
                            Id = 12,
                            NameSpecialite = "NÉPHROLOGIE"
                        },
                        new
                        {
                            Id = 13,
                            NameSpecialite = "NEUROLOGIE"
                        },
                        new
                        {
                            Id = 14,
                            NameSpecialite = "OBSTÉTRIQUE"
                        },
                        new
                        {
                            Id = 15,
                            NameSpecialite = "ONCOLOGIE"
                        },
                        new
                        {
                            Id = 16,
                            NameSpecialite = "OPHTALMOLOGIE"
                        },
                        new
                        {
                            Id = 17,
                            NameSpecialite = "ORTHOPÉDIE"
                        },
                        new
                        {
                            Id = 18,
                            NameSpecialite = "OTO-RHINO-LARYNGOLOGIE"
                        },
                        new
                        {
                            Id = 19,
                            NameSpecialite = "PÉDIATRIE"
                        },
                        new
                        {
                            Id = 20,
                            NameSpecialite = "PNEUMOLOGIE"
                        },
                        new
                        {
                            Id = 21,
                            NameSpecialite = "PSYCHIATRIE"
                        },
                        new
                        {
                            Id = 22,
                            NameSpecialite = "RADIOLOGIE"
                        },
                        new
                        {
                            Id = 23,
                            NameSpecialite = "RHUMATOLOGIE"
                        },
                        new
                        {
                            Id = 24,
                            NameSpecialite = "URGENTISTE"
                        });
                });

            modelBuilder.Entity("Server.Models.SpecialtieDoctor.SpecialtiesDoctor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<Guid>("IdDoctor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SpecialitesId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("SpecialitesId");

                    b.ToTable("specialtiesDoctors");
                });

            modelBuilder.Entity("Server.Models.UserAccount.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf35304b-0241-4b81-8f57-d0dccdccb836"),
                            ConcurrencyStamp = "0dd7886c-c910-4370-a42b-3af5cd1d7b9b",
                            Name = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2b102f8f-079c-4ae1-b093-487ba70cf183"),
                            ConcurrencyStamp = "948ef93f-feeb-48ce-80d3-656501a3c092",
                            Name = "PATIENT"
                        },
                        new
                        {
                            Id = new Guid("0d518584-64a4-424b-b011-7283083394b8"),
                            ConcurrencyStamp = "ba2cba45-b476-4743-b229-83d2210ab8c1",
                            Name = "SECRITAIRE"
                        },
                        new
                        {
                            Id = new Guid("14e8987f-77b0-44a9-a641-6c6779b9564c"),
                            ConcurrencyStamp = "2bc04d1a-117b-4503-9218-437865fb37ff",
                            Name = "MEDECIN"
                        },
                        new
                        {
                            Id = new Guid("03d2395f-a472-4a41-b95f-45828d5f8af4"),
                            ConcurrencyStamp = "b6f8baca-1001-4ccb-90d4-23c33a40f3a9",
                            Name = "RADIOLOGUE"
                        },
                        new
                        {
                            Id = new Guid("0916f1e5-ff87-4d4f-89b2-d6dbb922027e"),
                            ConcurrencyStamp = "39af03d9-1d9c-4c0d-af70-f262ba3d815a",
                            Name = "PHARMACIEN"
                        },
                        new
                        {
                            Id = new Guid("232d07c5-711e-4802-a048-f2f73804ea40"),
                            ConcurrencyStamp = "e6694a5c-b0c4-445e-9448-b90d0af745f1",
                            Name = "ANALYSE"
                        });
                });

            modelBuilder.Entity("Server.Models.UserAccount.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreateAccount")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateExpireRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sexe")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Server.Models.UserRoles.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("RoleId");

                    b.ToTable("userRoles");
                });

            modelBuilder.Entity("Server.Models.WorkDoctor.WorkDoctors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateInvitation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCabinet")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdDoctor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NbPatientAvailble")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadyTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusWork")
                        .HasColumnType("int");

                    b.Property<int>("TimeOfConsultation")
                        .HasColumnType("int");

                    b.Property<int>("statusReservation")
                        .HasColumnType("int");

                    b.Property<int>("statusServcie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCabinet");

                    b.HasIndex("IdDoctor");

                    b.ToTable("WorkDoctors");
                });

            modelBuilder.Entity("Server.Models.fileMedical.fileMedicals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdDoctor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalIdentification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sexe")
                        .HasColumnType("int");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdUser");

                    b.HasIndex("firstname", "Lastname");

                    b.ToTable("fileMedicals");
                });

            modelBuilder.Entity("Server.Models.secretary.Secretarys", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCabinetMedical")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCabinetMedical");

                    b.HasIndex("IdUser");

                    b.ToTable("Secretarys");
                });

            modelBuilder.Entity("Server.Models.Admin.Admins", b =>
                {
                    b.HasOne("Server.Models.CabinetMedicals.CabinetMedical", "CabinetMedical")
                        .WithMany("Admins")
                        .HasForeignKey("IdCabinet")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.Doctor.Doctors", "Doctors")
                        .WithMany("Admin")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CabinetMedical");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Server.Models.AdviceMedicals.AdviceMedical", b =>
                {
                    b.HasOne("Server.Models.MedicalOrder.MedicalOrdres", "MedicalOrdres")
                        .WithMany("AdviceMedical")
                        .HasForeignKey("OrdreMedicalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.UserAccount.User", "User")
                        .WithMany("AdviceMedicalSender")
                        .HasForeignKey("transmitterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicalOrdres");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.Analyse.Analyses", b =>
                {
                    b.HasOne("Server.Models.MedicalOrder.MedicalOrdres", "MedicalOrdres")
                        .WithMany("Analyses")
                        .HasForeignKey("IdOrdreMedical")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicalOrdres");
                });

            modelBuilder.Entity("Server.Models.CabinetMedicals.CabinetMedical", b =>
                {
                    b.HasOne("Server.Models.Cities.City", "City")
                        .WithMany("CabinetMedical")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");
                });

            modelBuilder.Entity("Server.Models.Doctor.Doctors", b =>
                {
                    b.HasOne("Server.Models.UserAccount.User", "User")
                        .WithMany("Doctor")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.FileChronicDisease.FileChronicDiseases", b =>
                {
                    b.HasOne("Server.Models.ChronicDiseases.ChronicDisease", "ChronicDisease")
                        .WithMany()
                        .HasForeignKey("IdChronicDisease")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.fileMedical.fileMedicals", "fileMedicals")
                        .WithMany("FileChronicDiseases")
                        .HasForeignKey("IdFile")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChronicDisease");

                    b.Navigation("fileMedicals");
                });

            modelBuilder.Entity("Server.Models.LineAnalyseMedical.LineAnalyseMedicals", b =>
                {
                    b.HasOne("Server.Models.Analyse.Analyses", "Analyses")
                        .WithMany("LineAnalyseMedicals")
                        .HasForeignKey("IdAnalyse")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.SpecialisteAnalyses.SpecialisteAnalyse", "SpecialisteAnalyse")
                        .WithMany("LinesAnalyses")
                        .HasForeignKey("IdSpecialisteAnalyse")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Analyses");

                    b.Navigation("SpecialisteAnalyse");
                });

            modelBuilder.Entity("Server.Models.LineRadioMedical.LineRadioMedicals", b =>
                {
                    b.HasOne("Server.Models.RadioMedical.Radio", "Radio")
                        .WithMany("LineRadioMedicals")
                        .HasForeignKey("IdRadio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.Radiologys.Radiology", "Radiology")
                        .WithMany("RadioLines")
                        .HasForeignKey("IdRadiology")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Radio");

                    b.Navigation("Radiology");
                });

            modelBuilder.Entity("Server.Models.MedicalOrder.MedicalOrdres", b =>
                {
                    b.HasOne("Server.Models.CabinetMedicals.CabinetMedical", "CabinetMedical")
                        .WithMany("MedicalOrder")
                        .HasForeignKey("IdCabinetMedical")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.Doctor.Doctors", "Doctors")
                        .WithMany("MedicalOrder")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.fileMedical.fileMedicals", "fileMedicals")
                        .WithMany("MedicalOrders")
                        .HasForeignKey("IdFileMedical")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.secretary.Secretarys", "Secretarys")
                        .WithMany("MedicalOrdres")
                        .HasForeignKey("IdSecritary")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CabinetMedical");

                    b.Navigation("Doctors");

                    b.Navigation("Secretarys");

                    b.Navigation("fileMedicals");
                });

            modelBuilder.Entity("Server.Models.MedicalPlannings.MedicalPlanning", b =>
                {
                    b.HasOne("Server.Models.CabinetMedicals.CabinetMedical", "CabinetMedical")
                        .WithMany("MedicalPlanning")
                        .HasForeignKey("IdCabinet")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.Doctor.Doctors", "Doctors")
                        .WithMany("MedicalPlanning")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.UserAccount.User", "User")
                        .WithMany("MedicalPlanning")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CabinetMedical");

                    b.Navigation("Doctors");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.Pharmacist.Pharmacists", b =>
                {
                    b.HasOne("Server.Models.Pharmacys.Pharmacy", "Pharmacy")
                        .WithMany("Pharmacists")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.UserAccount.User", "User")
                        .WithMany("pharmacists")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.PrescriptionLine.PrescriptionLines", b =>
                {
                    b.HasOne("Server.Models.Pharmacist.Pharmacists", "Pharmacists")
                        .WithMany("PrescriptionLines")
                        .HasForeignKey("IdPharmacist")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.Models.Prescriptions.Prescription", "Prescription")
                        .WithMany("prescriptionLines")
                        .HasForeignKey("IdPrescription")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pharmacists");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Server.Models.Prescriptions.Prescription", b =>
                {
                    b.HasOne("Server.Models.MedicalOrder.MedicalOrdres", "MedicalOrdres")
                        .WithMany("prescriptions")
                        .HasForeignKey("IdMedicalOrdre")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicalOrdres");
                });

            modelBuilder.Entity("Server.Models.RadioMedical.Radio", b =>
                {
                    b.HasOne("Server.Models.MedicalOrder.MedicalOrdres", "MedicalOrdres")
                        .WithMany("Radios")
                        .HasForeignKey("IdOrdreMedical")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicalOrdres");
                });

            modelBuilder.Entity("Server.Models.Radiologys.Radiology", b =>
                {
                    b.HasOne("Server.Models.Doctor.Doctors", "Doctors")
                        .WithMany("Radiology")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Server.Models.ResultAnalyses.ResultAnalyse", b =>
                {
                    b.HasOne("Server.Models.LineAnalyseMedical.LineAnalyseMedicals", "LineAnalyseMedicals")
                        .WithMany("ResultAnalyse")
                        .HasForeignKey("IdLineAnalyse")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LineAnalyseMedicals");
                });

            modelBuilder.Entity("Server.Models.ResultsRadio.ResultRadio", b =>
                {
                    b.HasOne("Server.Models.LineRadioMedical.LineRadioMedicals", "LineRadioMedicals")
                        .WithMany("resultRadios")
                        .HasForeignKey("IdLineRadio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LineRadioMedicals");
                });

            modelBuilder.Entity("Server.Models.SpecialisteAnalyses.SpecialisteAnalyse", b =>
                {
                    b.HasOne("Server.Models.UserAccount.User", "User")
                        .WithMany("MedicalAnalyse")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.MedicalsAnalysisClinic.MedicalAnalysisClinic", "MedicalAnalysisClinic")
                        .WithMany("SpecialisteAnalyses")
                        .HasForeignKey("MedicalAnalyseClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicalAnalysisClinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.SpecialtieDoctor.SpecialtiesDoctor", b =>
                {
                    b.HasOne("Server.Models.Doctor.Doctors", "Doctors")
                        .WithMany("SpecialtiesDoctor")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.Specialites.Specialite", "Specialite")
                        .WithMany("specialtiesDoctors")
                        .HasForeignKey("SpecialitesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctors");

                    b.Navigation("Specialite");
                });

            modelBuilder.Entity("Server.Models.UserRoles.UserRole", b =>
                {
                    b.HasOne("Server.Models.UserAccount.User", "User")
                        .WithMany("usersRoles")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.UserAccount.Role", "Role")
                        .WithMany("usersRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.WorkDoctor.WorkDoctors", b =>
                {
                    b.HasOne("Server.Models.CabinetMedicals.CabinetMedical", "CabinetMedical")
                        .WithMany("WorkDoctors")
                        .HasForeignKey("IdCabinet")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.Doctor.Doctors", "Doctors")
                        .WithMany("WorkDoctor")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CabinetMedical");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Server.Models.fileMedical.fileMedicals", b =>
                {
                    b.HasOne("Server.Models.Doctor.Doctors", "Doctors")
                        .WithMany("fileMedical")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.UserAccount.User", "User")
                        .WithMany("fileMedical")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Doctors");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.secretary.Secretarys", b =>
                {
                    b.HasOne("Server.Models.CabinetMedicals.CabinetMedical", "CabinetMedical")
                        .WithMany("Secretarys")
                        .HasForeignKey("IdCabinetMedical")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.UserAccount.User", "User")
                        .WithMany("Secretarys")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CabinetMedical");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.Analyse.Analyses", b =>
                {
                    b.Navigation("LineAnalyseMedicals");
                });

            modelBuilder.Entity("Server.Models.CabinetMedicals.CabinetMedical", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("MedicalOrder");

                    b.Navigation("MedicalPlanning");

                    b.Navigation("Secretarys");

                    b.Navigation("WorkDoctors");
                });

            modelBuilder.Entity("Server.Models.Cities.City", b =>
                {
                    b.Navigation("CabinetMedical");
                });

            modelBuilder.Entity("Server.Models.Doctor.Doctors", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("MedicalOrder");

                    b.Navigation("MedicalPlanning");

                    b.Navigation("Radiology");

                    b.Navigation("SpecialtiesDoctor");

                    b.Navigation("WorkDoctor");

                    b.Navigation("fileMedical");
                });

            modelBuilder.Entity("Server.Models.LineAnalyseMedical.LineAnalyseMedicals", b =>
                {
                    b.Navigation("ResultAnalyse");
                });

            modelBuilder.Entity("Server.Models.LineRadioMedical.LineRadioMedicals", b =>
                {
                    b.Navigation("resultRadios");
                });

            modelBuilder.Entity("Server.Models.MedicalOrder.MedicalOrdres", b =>
                {
                    b.Navigation("AdviceMedical");

                    b.Navigation("Analyses");

                    b.Navigation("Radios");

                    b.Navigation("prescriptions");
                });

            modelBuilder.Entity("Server.Models.MedicalsAnalysisClinic.MedicalAnalysisClinic", b =>
                {
                    b.Navigation("SpecialisteAnalyses");
                });

            modelBuilder.Entity("Server.Models.Pharmacist.Pharmacists", b =>
                {
                    b.Navigation("PrescriptionLines");
                });

            modelBuilder.Entity("Server.Models.Pharmacys.Pharmacy", b =>
                {
                    b.Navigation("Pharmacists");
                });

            modelBuilder.Entity("Server.Models.Prescriptions.Prescription", b =>
                {
                    b.Navigation("prescriptionLines");
                });

            modelBuilder.Entity("Server.Models.RadioMedical.Radio", b =>
                {
                    b.Navigation("LineRadioMedicals");
                });

            modelBuilder.Entity("Server.Models.Radiologys.Radiology", b =>
                {
                    b.Navigation("RadioLines");
                });

            modelBuilder.Entity("Server.Models.SpecialisteAnalyses.SpecialisteAnalyse", b =>
                {
                    b.Navigation("LinesAnalyses");
                });

            modelBuilder.Entity("Server.Models.Specialites.Specialite", b =>
                {
                    b.Navigation("specialtiesDoctors");
                });

            modelBuilder.Entity("Server.Models.UserAccount.Role", b =>
                {
                    b.Navigation("usersRoles");
                });

            modelBuilder.Entity("Server.Models.UserAccount.User", b =>
                {
                    b.Navigation("AdviceMedicalSender");

                    b.Navigation("Doctor");

                    b.Navigation("MedicalAnalyse");

                    b.Navigation("MedicalPlanning");

                    b.Navigation("Secretarys");

                    b.Navigation("fileMedical");

                    b.Navigation("pharmacists");

                    b.Navigation("usersRoles");
                });

            modelBuilder.Entity("Server.Models.fileMedical.fileMedicals", b =>
                {
                    b.Navigation("FileChronicDiseases");

                    b.Navigation("MedicalOrders");
                });

            modelBuilder.Entity("Server.Models.secretary.Secretarys", b =>
                {
                    b.Navigation("MedicalOrdres");
                });
#pragma warning restore 612, 618
        }
    }
}
